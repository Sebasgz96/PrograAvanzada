//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AplicacionWeb.OperacionesMatematicas {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/BLAplicacionWeb")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OperacionesMatematicas.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sumar", ReplyAction="http://tempuri.org/IService1/SumarResponse")]
        double Sumar(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sumar", ReplyAction="http://tempuri.org/IService1/SumarResponse")]
        System.Threading.Tasks.Task<double> SumarAsync(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Restar", ReplyAction="http://tempuri.org/IService1/RestarResponse")]
        double Restar(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Restar", ReplyAction="http://tempuri.org/IService1/RestarResponse")]
        System.Threading.Tasks.Task<double> RestarAsync(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiplicar", ReplyAction="http://tempuri.org/IService1/MultiplicarResponse")]
        double Multiplicar(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Multiplicar", ReplyAction="http://tempuri.org/IService1/MultiplicarResponse")]
        System.Threading.Tasks.Task<double> MultiplicarAsync(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Dividir", ReplyAction="http://tempuri.org/IService1/DividirResponse")]
        double Dividir(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Dividir", ReplyAction="http://tempuri.org/IService1/DividirResponse")]
        System.Threading.Tasks.Task<double> DividirAsync(double valor1, double valor2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WhatDateIsToday", ReplyAction="http://tempuri.org/IService1/WhatDateIsTodayResponse")]
        string WhatDateIsToday();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WhatDateIsToday", ReplyAction="http://tempuri.org/IService1/WhatDateIsTodayResponse")]
        System.Threading.Tasks.Task<string> WhatDateIsTodayAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        AplicacionWeb.OperacionesMatematicas.CompositeType GetDataUsingDataContract(AplicacionWeb.OperacionesMatematicas.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<AplicacionWeb.OperacionesMatematicas.CompositeType> GetDataUsingDataContractAsync(AplicacionWeb.OperacionesMatematicas.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : AplicacionWeb.OperacionesMatematicas.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<AplicacionWeb.OperacionesMatematicas.IService1>, AplicacionWeb.OperacionesMatematicas.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sumar(double valor1, double valor2) {
            return base.Channel.Sumar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<double> SumarAsync(double valor1, double valor2) {
            return base.Channel.SumarAsync(valor1, valor2);
        }
        
        public double Restar(double valor1, double valor2) {
            return base.Channel.Restar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<double> RestarAsync(double valor1, double valor2) {
            return base.Channel.RestarAsync(valor1, valor2);
        }
        
        public double Multiplicar(double valor1, double valor2) {
            return base.Channel.Multiplicar(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicarAsync(double valor1, double valor2) {
            return base.Channel.MultiplicarAsync(valor1, valor2);
        }
        
        public double Dividir(double valor1, double valor2) {
            return base.Channel.Dividir(valor1, valor2);
        }
        
        public System.Threading.Tasks.Task<double> DividirAsync(double valor1, double valor2) {
            return base.Channel.DividirAsync(valor1, valor2);
        }
        
        public string WhatDateIsToday() {
            return base.Channel.WhatDateIsToday();
        }
        
        public System.Threading.Tasks.Task<string> WhatDateIsTodayAsync() {
            return base.Channel.WhatDateIsTodayAsync();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public AplicacionWeb.OperacionesMatematicas.CompositeType GetDataUsingDataContract(AplicacionWeb.OperacionesMatematicas.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<AplicacionWeb.OperacionesMatematicas.CompositeType> GetDataUsingDataContractAsync(AplicacionWeb.OperacionesMatematicas.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }

        
    }
}
